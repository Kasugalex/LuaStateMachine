local getmetatable = getmetatable
local setmetatable = setmetatable
local rawset = rawset
local pcall = pcall

module("class")

local function Class(base,static,instance)
    -- 目前base一定要传
    local mt = getmetatable(base)

    local class = static or {}
    setmetatable(class, 
        {
            __index = base,
            __call = function(...)
                local nInst = {}
                --使用子类或者父类调用同个方法，self代表的table是不一样的
                local r = mt.__call(...)
                r.__self = nInst
                
                local ret = instance or {}
                

                --子类构造方法可以通过__super获取真正父类的实例，不可以在构造方法外使用__super字段（function除外，父类function复用）
                ret.__super = r
                nInst.__base = r

                local ins_ret = setmetatable(
                    -- {
                    --     __base = r,
                    -- },
                    nInst,
                    {
                        --所有后期属性设置都会优先存在子类table内
                        __index = function(t, k)
                            local ret_field
                            ret_field = ret[k]
                            if nil == ret_field then
                                ret_field = r[k]
                            end

                            return ret_field
                        end,

                        __newindex = function(t,k,v)
                            if not pcall(function() r[k]=v end) then
                                rawset(t,k,v)
                            end
                        end,
                    })

                
                --ctor方法不需要递归调用父类ctor方法，__call方法会调用对于ctor
                if ret.ctor then
                    ret.ctor(ins_ret, ...)
                end

                return ins_ret
            end,
        }
    )
    return class
end
return Class